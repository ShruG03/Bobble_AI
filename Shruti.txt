AI Interview / assignment questions

PART A

1. 19/59

2. True Negative

3. b

4. (D) θ0=0,θ1=0.5

5. (C) Statement 1 and Statement 4 are correct
    Explanation: Statement 1:At a global minimum, the derivative (gradient) is zero, so gradient descent will not change the parameters.
                 Statement 4:If alpha were small enough, then gradient descent should always successfully take a tiny small downhill and decrease f(θ0,θ1) at least a little bit. If gradient descent instead increases the objective value, that means alpha is too large.

6. (D) Statement 2 and Statement 3 are correct

7.(A) Statement 1 and Statement 3 are correct

8.(D) Random forest
Explanation: The Radom Forest algorithm builds an ensemble of Decision Trees, mostly trained with the bagging method.

9. (D) None of the above

10.(C) Both A and B 

11.(A) Normalize the data -> PCA -> training

12. (D) All of the above

13.(C) Both A and B

14. (D) None of the above

15. (B) Use multiple radom initializations

16. (C) 1,2 and 3

17. (A) Choose k to be the smallest value so that at least 99% of the varinace is retained

18. (C) a=0.3 is an effective choice of learning rate

19. (D) AND  Explanation: This network outputs approximately 1 only when both inputs are 1.

20. (B) 13/30

21. (B) Image translation

22.(B) Median filter

23. (B) LAB

24. B) The process of modifying pixel intensity value of an image

25. (A) Zero

PART B

1.decrease
2.  non-linear, classification, decrease
3.classification
4. testing, training
5. from -1 to 256


PART C

 Q3 
// C++ program if whenever you find a zero fill that row and column with zeroes.

class Rowcol {
public:
    void setZeroes(vector<vector<int>>& arr ) 
    {
        
        int n = arr.size() ;
        if ( !n )
                return ; 
        int  m = arr [ 0].size() ; 
        bool flag1 = 0 , flag2 = 0 ; 
        
        
        for ( int i = 0 ; i < m ; i ++ )
                if ( arr [ 0 ] [ i ] == 0 )
                        flag1 = 1 ;
        
        for ( int j = 0 ; j < n ; j ++ )
                if ( arr [ j ] [ 0 ] == 0 )
                        flag2 = 1 ; 
        
        
        for ( int i = 0 ; i < n ; i ++ )
        {
            for ( int j = 0 ; j < m ; j ++ )
            {
                if ( arr [ i ] [ j ] == 0 )
                {
                    arr [ i ] [ 0 ] = 0 ; 
                    arr [ 0 ] [ j ] = 0 ; 
                }
            }
        }
        
        
        
        for ( int i = 1 ; i < n ; i ++ )
        {
            for ( int j = 1 ; j < m ; j ++ )
            {
                if ( arr [ 0 ] [ j ] == 0  or arr [ i ] [ 0 ] == 0 )
                    arr [ i ] [ j ] = 0 ; 
                
            }
        }
        
        if ( flag1 )
                 for ( int i = 0 ; i < m ; i ++ )
                        arr [ 0 ] [ i ] = 0 ; 
        
        
        if ( flag2 )
                 for ( int i = 0 ; i < n ; i ++ )
                        arr [ i ] [ 0 ] = 0 ; 
    }
};

